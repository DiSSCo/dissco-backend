/*
 * This file is generated by jOOQ.
 */
package eu.dissco.backend.database.jooq.tables;


import eu.dissco.backend.database.jooq.Indexes;
import eu.dissco.backend.database.jooq.Keys;
import eu.dissco.backend.database.jooq.Public;
import eu.dissco.backend.database.jooq.enums.Curatedobjectidtypes;
import eu.dissco.backend.database.jooq.tables.records.DigitalSpecimenRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DigitalSpecimen extends TableImpl<DigitalSpecimenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.digital_specimen</code>
     */
    public static final DigitalSpecimen DIGITAL_SPECIMEN = new DigitalSpecimen();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DigitalSpecimenRecord> getRecordType() {
        return DigitalSpecimenRecord.class;
    }

    /**
     * The column <code>public.digital_specimen.id</code>.
     */
    public final TableField<DigitalSpecimenRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.digital_specimen.object_type</code>.
     */
    public final TableField<DigitalSpecimenRecord, String> OBJECT_TYPE = createField(DSL.name("object_type"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.digital_specimen.curated_object_id</code>.
     */
    public final TableField<DigitalSpecimenRecord, String> CURATED_OBJECT_ID = createField(DSL.name("curated_object_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.digital_specimen.mids_level</code>.
     */
    public final TableField<DigitalSpecimenRecord, Short> MIDS_LEVEL = createField(DSL.name("mids_level"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.digital_specimen.curated_object_id_type</code>.
     */
    public final TableField<DigitalSpecimenRecord, Curatedobjectidtypes> CURATED_OBJECT_ID_TYPE = createField(DSL.name("curated_object_id_type"), SQLDataType.VARCHAR.asEnumDataType(eu.dissco.backend.database.jooq.enums.Curatedobjectidtypes.class), this, "");

    /**
     * The column <code>public.digital_specimen.specimen_name</code>.
     */
    public final TableField<DigitalSpecimenRecord, String> SPECIMEN_NAME = createField(DSL.name("specimen_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.digital_specimen.institution_id</code>.
     */
    public final TableField<DigitalSpecimenRecord, String> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.digital_specimen.institution_name</code>.
     */
    public final TableField<DigitalSpecimenRecord, String> INSTITUTION_NAME = createField(DSL.name("institution_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.digital_specimen.data</code>.
     */
    public final TableField<DigitalSpecimenRecord, JSONB> DATA = createField(DSL.name("data"), SQLDataType.JSONB.nullable(false), this, "");

    private DigitalSpecimen(Name alias, Table<DigitalSpecimenRecord> aliased) {
        this(alias, aliased, null);
    }

    private DigitalSpecimen(Name alias, Table<DigitalSpecimenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.digital_specimen</code> table reference
     */
    public DigitalSpecimen(String alias) {
        this(DSL.name(alias), DIGITAL_SPECIMEN);
    }

    /**
     * Create an aliased <code>public.digital_specimen</code> table reference
     */
    public DigitalSpecimen(Name alias) {
        this(alias, DIGITAL_SPECIMEN);
    }

    /**
     * Create a <code>public.digital_specimen</code> table reference
     */
    public DigitalSpecimen() {
        this(DSL.name("digital_specimen"), null);
    }

    public <O extends Record> DigitalSpecimen(Table<O> child, ForeignKey<O, DigitalSpecimenRecord> key) {
        super(child, key, DIGITAL_SPECIMEN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PHYSICAL_ID_INDEX);
    }

    @Override
    public UniqueKey<DigitalSpecimenRecord> getPrimaryKey() {
        return Keys.DIGITAL_SPECIMEN_PKEY;
    }

    @Override
    public List<UniqueKey<DigitalSpecimenRecord>> getKeys() {
        return Arrays.<UniqueKey<DigitalSpecimenRecord>>asList(Keys.DIGITAL_SPECIMEN_PKEY);
    }

    @Override
    public DigitalSpecimen as(String alias) {
        return new DigitalSpecimen(DSL.name(alias), this);
    }

    @Override
    public DigitalSpecimen as(Name alias) {
        return new DigitalSpecimen(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DigitalSpecimen rename(String name) {
        return new DigitalSpecimen(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DigitalSpecimen rename(Name name) {
        return new DigitalSpecimen(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, Short, Curatedobjectidtypes, String, String, String, JSONB> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
