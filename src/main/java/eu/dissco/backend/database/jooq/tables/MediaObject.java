/*
 * This file is generated by jOOQ.
 */
package eu.dissco.backend.database.jooq.tables;


import eu.dissco.backend.database.jooq.Keys;
import eu.dissco.backend.database.jooq.Public;
import eu.dissco.backend.database.jooq.tables.records.MediaObjectRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MediaObject extends TableImpl<MediaObjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.media_object</code>
     */
    public static final MediaObject MEDIA_OBJECT = new MediaObject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MediaObjectRecord> getRecordType() {
        return MediaObjectRecord.class;
    }

    /**
     * The column <code>public.media_object.id</code>.
     */
    public final TableField<MediaObjectRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.media_object.type</code>.
     */
    public final TableField<MediaObjectRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.media_object.digital_specimen</code>.
     */
    public final TableField<MediaObjectRecord, String> DIGITAL_SPECIMEN = createField(DSL.name("digital_specimen"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.media_object.media_url</code>.
     */
    public final TableField<MediaObjectRecord, String> MEDIA_URL = createField(DSL.name("media_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.media_object.data</code>.
     */
    public final TableField<MediaObjectRecord, JSONB> DATA = createField(DSL.name("data"), SQLDataType.JSONB, this, "");

    private MediaObject(Name alias, Table<MediaObjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private MediaObject(Name alias, Table<MediaObjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.media_object</code> table reference
     */
    public MediaObject(String alias) {
        this(DSL.name(alias), MEDIA_OBJECT);
    }

    /**
     * Create an aliased <code>public.media_object</code> table reference
     */
    public MediaObject(Name alias) {
        this(alias, MEDIA_OBJECT);
    }

    /**
     * Create a <code>public.media_object</code> table reference
     */
    public MediaObject() {
        this(DSL.name("media_object"), null);
    }

    public <O extends Record> MediaObject(Table<O> child, ForeignKey<O, MediaObjectRecord> key) {
        super(child, key, MEDIA_OBJECT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<MediaObjectRecord> getPrimaryKey() {
        return Keys.MEDIA_OBJECT_PKEY;
    }

    @Override
    public List<UniqueKey<MediaObjectRecord>> getKeys() {
        return Arrays.<UniqueKey<MediaObjectRecord>>asList(Keys.MEDIA_OBJECT_PKEY);
    }

    @Override
    public List<ForeignKey<MediaObjectRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MediaObjectRecord, ?>>asList(Keys.MEDIA_OBJECT__MEDIA_OBJECT_DIGITAL_SPECIMEN_FKEY);
    }

    private transient DigitalSpecimen _digitalSpecimen;

    public DigitalSpecimen digitalSpecimen() {
        if (_digitalSpecimen == null)
            _digitalSpecimen = new DigitalSpecimen(this, Keys.MEDIA_OBJECT__MEDIA_OBJECT_DIGITAL_SPECIMEN_FKEY);

        return _digitalSpecimen;
    }

    @Override
    public MediaObject as(String alias) {
        return new MediaObject(DSL.name(alias), this);
    }

    @Override
    public MediaObject as(Name alias) {
        return new MediaObject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MediaObject rename(String name) {
        return new MediaObject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MediaObject rename(Name name) {
        return new MediaObject(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, JSONB> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
